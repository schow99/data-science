text(125, 370, 'Predicted', cex=1.3, srt=90, font=2)
text(245, 450, 'Actual', cex=1.3, font=2)
rect(150, 305, 240, 365, col=getColor("red", res[2]))
rect(250, 305, 340, 365, col=getColor("green", res[4]))
text(140, 400, classes[1], cex=1.2, srt=90)
text(140, 335, classes[2], cex=1.2, srt=90)
# add in the cm results
text(195, 400, res[1], cex=1.6, font=2, col='white')
text(195, 335, res[2], cex=1.6, font=2, col='white')
text(295, 400, res[3], cex=1.6, font=2, col='white')
text(295, 335, res[4], cex=1.6, font=2, col='white')
# add in the specifics
plot(c(100, 0), c(100, 0), type = "n", xlab="", ylab="", main = "DETAILS", xaxt='n', yaxt='n')
text(10, 85, names(cm$byClass[1]), cex=1.2, font=2)
text(10, 70, round(as.numeric(cm$byClass[1]), 3), cex=1.2)
text(30, 85, names(cm$byClass[2]), cex=1.2, font=2)
text(30, 70, round(as.numeric(cm$byClass[2]), 3), cex=1.2)
text(50, 85, names(cm$byClass[5]), cex=1.2, font=2)
text(50, 70, round(as.numeric(cm$byClass[5]), 3), cex=1.2)
text(70, 85, names(cm$byClass[6]), cex=1.2, font=2)
text(70, 70, round(as.numeric(cm$byClass[6]), 3), cex=1.2)
text(90, 85, names(cm$byClass[7]), cex=1.2, font=2)
text(90, 70, round(as.numeric(cm$byClass[7]), 3), cex=1.2)
# add in the accuracy information
text(30, 35, names(cm$overall[1]), cex=1.5, font=2)
text(30, 20, round(as.numeric(cm$overall[1]), 3), cex=1.4)
text(70, 35, names(cm$overall[2]), cex=1.5, font=2)
text(70, 20, round(as.numeric(cm$overall[2]), 3), cex=1.4)
}
cm = confusionMatrix(test$NBA_3Pt_Predict_logistic, test$above36)
library(caret)
mod2 = glm(above36 ~ NCAA_3Pt_Pct + NCAA_FT_Pct + NCAA_3Pt_PG, data = train, family = "binomial")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggplot2)
library(ggthemes)
library(kableExtra)
players = read_csv("players_updated.csv")
players$diff_ft = players$nba_ft - players$ncaa_ft
players$diff_fg = players$nba_fg - players$ncaa_fgpct
players$diff_3ptpct = players$nba_3ptpct - players$ncaa_3ptpct
players$diff_efg = players$nba_efgpct - players$ncaa_efgpct
players_shooting = select(players, name, position, height_inches, nba_ppg, ncaa_ppg, nba_ft, ncaa_ft, diff_ft, nba_3ptpct, ncaa_3ptpct, diff_3ptpct, nba_3ptpg, ncaa_3ptpg, nba_fg, ncaa_fgpct, diff_fg, nba_fg_per_game, ncaa_fgpg, nba_efgpct, ncaa_efgpct, diff_efg)
names(players_shooting) = c("Name", "Position", "Height_Inches", "NBA_PPG", "NCAA_PPG", "NBA_FT_Pct", "NCAA_FT_Pct", "Diff_FT_Pct", "NBA_3Pt_Pct", "NCAA_3Pt_Pct", "Diff_3Pt_Pct", "NBA_3Pt_PG", "NCAA_3Pt_PG", "NBA_FG_Pct", "NCAA_FG_Pct", "Diff_FG_Pct", "NBA_FG_PG", "NCAA_FG_PG", "NBA_EFG_Pct", "NCAA_EFG_Pct", "Diff_EFG_Pct")
players_shooting %>% filter(Name %in% c("George Mikan", "Rick Barry", "Magic Johnson", "Kobe Bryant", "Stephen Curry", "Giannis Antetokounmpo", "Michael Jordan", "Kawhi Leonard")) %>% kable() %>%
kable_styling()
players_final = players_shooting %>%
filter(!is.na(Diff_FT_Pct)) %>%
filter(!is.na(Diff_FG_Pct)) %>%
filter(!is.na(Diff_3Pt_Pct)) %>%
filter(!is.na(Diff_EFG_Pct))
head(players_final, n = 10)%>% kable() %>%
kable_styling()
above36_3ptpct = subset(players_final, NBA_3Pt_Pct >= 0.36)
below36_3ptpct = subset(players_final, NBA_3Pt_Pct < 0.36)
ggplot(above36_3ptpct, aes(x = NCAA_3Pt_Pct)) + geom_histogram() + ggtitle("3 point percentage in NCAA for NBA players shooting about 36% from 3") + xlab("NCAA 3 point percentage")  + scale_color_fivethirtyeight() + theme_fivethirtyeight() + xlim(0,1) + geom_vline(xintercept = 0.36)
ggplot(below36_3ptpct, aes(x = NCAA_3Pt_Pct)) + geom_histogram() + ggtitle("3 point percentage in NCAA for NBA players shooting below 36% from 3") + xlab("NCAA 3 point percentage") + theme_economist() + scale_color_economist() + xlim(0,1) + geom_vline(xintercept = 0.36)
ggplot(players_final, aes(x = Position)) + geom_bar() + scale_color_ptol("cyl") + theme_minimal()
quantile= c('0%', '25%', '50%', '75%', '100%')
#quantile(above36_3ptpct$NCAA_3Pt_Pct)
#quantile(below36_3ptpct$NCAA_3Pt_Pct)
above36_3Pt = c(0.000, 0.3365, 0.3640, 0.4030, 0.6250)
below36_3Pt = c(0.000, 0.296, 0.346, 0.380, 1.000)
comp = NULL
comp = cbind(comp, quantile, above36_3Pt, below36_3Pt)
#ggplot(above36_3ptpct, aes(x = NCAA_3Pt_Pct)) + geom_histogram() + ggtitle("3 point percentage in NCAA for NBA players shooting about 36% from 3") + xlab("3 point percentage")
#ggplot(below36_3ptpct, aes(x = NCAA_3Pt_Pct)) + geom_histogram() + ggtitle("3 point percentage in NCAA for NBA players shooting below 36% from 3") + xlab("3 point percentage")
#quantile(above36_3ptpct$NCAA_FT_Pct)
#quantile(below36_3ptpct$NCAA_FT_Pct)
#quantile(above36_3ptpct$NCAA_3Pt_PG)
#quantile(below36_3ptpct$NCAA_3Pt_PG)
above36_3PPG = c(0.0, 0.7, 1.4, 2.0, 4.0)
below36_3PPG = c(0.0, 0.2, 0.8, 1.4, 4.0)
above36_FT = c(0.466, 0.718, 0.768, 0.818, 0.931)
below36_FT = c(0.295, 0.671, 0.725, 0.773, 0.946)
quantile_table = cbind(comp, above36_FT, below36_FT, above36_3PPG, below36_3PPG)
colnames(quantile_table) = c("Quantile", "Above 36% NBA 3 Point - NCAA Free Throw Percentage", "Below 36% NBA 3 Point - NCAA Free Throw Percentage", "Above 36% NBA 3 Point - NCAA 3 Point Percentage", "Below 36% NBA 3 Point - NCAA 3 Point Percentage", "Above 36% NBA 3 Point - NCAA 3 Point Attempts Per Game", "Below 36% NBA 3 Point - NCAA 3 Point Attempts Per Game")
as.tibble(quantile_table) %>% kable() %>%
kable_styling()
#ggplot(above36_3ptpct, aes(x = NCAA_FT_Pct)) + geom_histogram() + ggtitle("Free throw percentage in NCAA for NBA players shooting above 36% from 3") + xlab("Free throw percentage")
#ggplot(below36_3ptpct, aes(x = NCAA_FT_Pct)) + geom_histogram() + ggtitle("Free throw percentage in NCAA for NBA players shooting below 36% from 3") + xlab("Free throw percentage")
library(caTools)
set.seed(124)
players_final$above36 = players_final$NBA_3Pt_Pct >= 0.36
players_final$above36 = as.integer(as.logical(players_final$above36))
players_final_noOutliers = players_final %>%
filter(NBA_3Pt_Pct > 0) %>%
filter(NBA_3Pt_Pct < 1)
sample = sample.split(players_final_noOutliers,SplitRatio = 0.8)
train =subset(players_final_noOutliers,sample ==TRUE)
test=subset(players_final_noOutliers, sample==FALSE)
mod1 = lm(NBA_3Pt_Pct ~ NCAA_3Pt_Pct + NCAA_FT_Pct + NCAA_3Pt_PG, data = train)
summary(mod1)
NBA_3Pt_Fit = predict(mod1, newdata = test)
cor(test$NBA_3Pt_Pct, NBA_3Pt_Fit)
test$NBA_3Pt_Predict = NBA_3Pt_Fit
ggplot(data = test, aes(x = NBA_3Pt_Pct , y = NBA_3Pt_Predict)) + geom_point() + xlim(0,0.5) + ylim(0,0.5)
library(caret)
mod2 = glm(above36 ~ NCAA_3Pt_Pct + NCAA_FT_Pct + NCAA_3Pt_PG, data = train, family = "binomial")
summary(mod2)
NBA_3Pt_Fit_logistic = predict(mod2, newdata = test, type = "response")
NBA_3Pt_Fit_logistic <- ifelse(NBA_3Pt_Fit_logistic >= 0.36,1,0)
test$NBA_3Pt_Predict_logistic = as.factor(NBA_3Pt_Fit_logistic)
test$above36 = as.factor(test$above36)
misClasificError <- mean(NBA_3Pt_Fit_logistic != test$above36)
print(paste('Accuracy',1-misClasificError))
cm = confusionMatrix(test$NBA_3Pt_Predict_logistic, test$above36)
draw_confusion_matrix(cm)
draw_confusion_matrix <- function(cm) {
total <- sum(cm$table)
res <- as.numeric(cm$table)
# Generate color gradients. Palettes come from RColorBrewer.
greenPalette <- c("#F7FCF5","#E5F5E0","#C7E9C0","#A1D99B","#74C476","#41AB5D","#238B45","#006D2C","#00441B")
redPalette <- c("#FFF5F0","#FEE0D2","#FCBBA1","#FC9272","#FB6A4A","#EF3B2C","#CB181D","#A50F15","#67000D")
getColor <- function (greenOrRed = "green", amount = 0) {
if (amount == 0)
return("#FFFFFF")
palette <- greenPalette
if (greenOrRed == "red")
palette <- redPalette
colorRampPalette(palette)(100)[10 + ceiling(90 * amount / total)]
}
# set the basic layout
layout(matrix(c(1,1,2)))
par(mar=c(2,2,2,2))
plot(c(100, 345), c(300, 450), type = "n", xlab="", ylab="", xaxt='n', yaxt='n')
title('CONFUSION MATRIX', cex.main=2)
# create the matrix
classes = colnames(cm$table)
rect(150, 430, 240, 370, col=getColor("green", res[1]))
text(195, 435, classes[1], cex=1.2)
rect(250, 430, 340, 370, col=getColor("red", res[3]))
text(295, 435, classes[2], cex=1.2)
text(125, 370, 'Predicted', cex=1.3, srt=90, font=2)
text(245, 450, 'Actual', cex=1.3, font=2)
rect(150, 305, 240, 365, col=getColor("red", res[2]))
rect(250, 305, 340, 365, col=getColor("green", res[4]))
text(140, 400, classes[1], cex=1.2, srt=90)
text(140, 335, classes[2], cex=1.2, srt=90)
# add in the cm results
text(195, 400, res[1], cex=1.6, font=2, col='white')
text(195, 335, res[2], cex=1.6, font=2, col='white')
text(295, 400, res[3], cex=1.6, font=2, col='white')
text(295, 335, res[4], cex=1.6, font=2, col='white')
# add in the accuracy information
text(30, 35, names(cm$overall[1]), cex=1.5, font=2)
text(30, 20, round(as.numeric(cm$overall[1]), 3), cex=1.4)
text(70, 35, names(cm$overall[2]), cex=1.5, font=2)
text(70, 20, round(as.numeric(cm$overall[2]), 3), cex=1.4)
}
cm = confusionMatrix(test$NBA_3Pt_Predict_logistic, test$above36)
draw_confusion_matrix(cm)
draw_confusion_matrix <- function(cm) {
total <- sum(cm$table)
res <- as.numeric(cm$table)
# Generate color gradients. Palettes come from RColorBrewer.
greenPalette <- c("#F7FCF5","#E5F5E0","#C7E9C0","#A1D99B","#74C476","#41AB5D","#238B45","#006D2C","#00441B")
redPalette <- c("#FFF5F0","#FEE0D2","#FCBBA1","#FC9272","#FB6A4A","#EF3B2C","#CB181D","#A50F15","#67000D")
getColor <- function (greenOrRed = "green", amount = 0) {
if (amount == 0)
return("#FFFFFF")
palette <- greenPalette
if (greenOrRed == "red")
palette <- redPalette
colorRampPalette(palette)(100)[10 + ceiling(90 * amount / total)]
}
# set the basic layout
layout(matrix(c(1,1,2)))
par(mar=c(2,2,2,2))
plot(c(100, 345), c(300, 450), type = "n", xlab="", ylab="", xaxt='n', yaxt='n')
title('CONFUSION MATRIX', cex.main=2)
# create the matrix
classes = colnames(cm$table)
rect(150, 430, 240, 370, col=getColor("green", res[1]))
text(195, 435, classes[1], cex=1.2)
rect(250, 430, 340, 370, col=getColor("red", res[3]))
text(295, 435, classes[2], cex=1.2)
text(125, 370, 'Predicted', cex=1.3, srt=90, font=2)
text(245, 450, 'Actual', cex=1.3, font=2)
rect(150, 305, 240, 365, col=getColor("red", res[2]))
rect(250, 305, 340, 365, col=getColor("green", res[4]))
text(140, 400, classes[1], cex=1.2, srt=90)
text(140, 335, classes[2], cex=1.2, srt=90)
# add in the cm results
text(195, 400, res[1], cex=1.6, font=2, col='white')
text(195, 335, res[2], cex=1.6, font=2, col='white')
text(295, 400, res[3], cex=1.6, font=2, col='white')
text(295, 335, res[4], cex=1.6, font=2, col='white')
# add in the specifics
plot(c(100, 0), c(100, 0), type = "n", xlab="", ylab="", main = "DETAILS", xaxt='n', yaxt='n')
text(10, 85, names(cm$byClass[1]), cex=1.2, font=2)
text(10, 70, round(as.numeric(cm$byClass[1]), 3), cex=1.2)
# add in the accuracy information
text(30, 35, names(cm$overall[1]), cex=1.5, font=2)
text(30, 20, round(as.numeric(cm$overall[1]), 3), cex=1.4)
text(70, 35, names(cm$overall[2]), cex=1.5, font=2)
text(70, 20, round(as.numeric(cm$overall[2]), 3), cex=1.4)
}
cm = confusionMatrix(test$NBA_3Pt_Predict_logistic, test$above36)
draw_confusion_matrix(cm)
draw_confusion_matrix <- function(cm) {
total <- sum(cm$table)
res <- as.numeric(cm$table)
# Generate color gradients. Palettes come from RColorBrewer.
greenPalette <- c("#F7FCF5","#E5F5E0","#C7E9C0","#A1D99B","#74C476","#41AB5D","#238B45","#006D2C","#00441B")
redPalette <- c("#FFF5F0","#FEE0D2","#FCBBA1","#FC9272","#FB6A4A","#EF3B2C","#CB181D","#A50F15","#67000D")
getColor <- function (greenOrRed = "green", amount = 0) {
if (amount == 0)
return("#FFFFFF")
palette <- greenPalette
if (greenOrRed == "red")
palette <- redPalette
colorRampPalette(palette)(100)[10 + ceiling(90 * amount / total)]
}
# set the basic layout
layout(matrix(c(1,1,2)))
par(mar=c(2,2,2,2))
plot(c(100, 345), c(300, 450), type = "n", xlab="", ylab="", xaxt='n', yaxt='n')
title('CONFUSION MATRIX', cex.main=2)
# create the matrix
classes = colnames(cm$table)
rect(150, 430, 240, 370, col=getColor("green", res[1]))
text(195, 435, classes[1], cex=1.2)
rect(250, 430, 340, 370, col=getColor("red", res[3]))
text(295, 435, classes[2], cex=1.2)
text(125, 370, 'Predicted', cex=1.3, srt=90, font=2)
text(245, 450, 'Actual', cex=1.3, font=2)
rect(150, 305, 240, 365, col=getColor("red", res[2]))
rect(250, 305, 340, 365, col=getColor("green", res[4]))
text(140, 400, classes[1], cex=1.2, srt=90)
text(140, 335, classes[2], cex=1.2, srt=90)
# add in the cm results
text(195, 400, res[1], cex=1.6, font=2, col='white')
text(195, 335, res[2], cex=1.6, font=2, col='white')
text(295, 400, res[3], cex=1.6, font=2, col='white')
text(295, 335, res[4], cex=1.6, font=2, col='white')
# add in the specifics
plot(c(100, 0), c(100, 0), type = "n", xlab="", ylab="", main = "DETAILS", xaxt='n', yaxt='n')
text(10, 85, names(cm$byClass[1]), cex=1.2, font=2)
# add in the accuracy information
text(30, 35, names(cm$overall[1]), cex=1.5, font=2)
text(30, 20, round(as.numeric(cm$overall[1]), 3), cex=1.4)
text(70, 35, names(cm$overall[2]), cex=1.5, font=2)
text(70, 20, round(as.numeric(cm$overall[2]), 3), cex=1.4)
}
cm = confusionMatrix(test$NBA_3Pt_Predict_logistic, test$above36)
draw_confusion_matrix(cm)
draw_confusion_matrix <- function(cm) {
total <- sum(cm$table)
res <- as.numeric(cm$table)
# Generate color gradients. Palettes come from RColorBrewer.
greenPalette <- c("#F7FCF5","#E5F5E0","#C7E9C0","#A1D99B","#74C476","#41AB5D","#238B45","#006D2C","#00441B")
redPalette <- c("#FFF5F0","#FEE0D2","#FCBBA1","#FC9272","#FB6A4A","#EF3B2C","#CB181D","#A50F15","#67000D")
getColor <- function (greenOrRed = "green", amount = 0) {
if (amount == 0)
return("#FFFFFF")
palette <- greenPalette
if (greenOrRed == "red")
palette <- redPalette
colorRampPalette(palette)(100)[10 + ceiling(90 * amount / total)]
}
# set the basic layout
layout(matrix(c(1,1,2)))
par(mar=c(2,2,2,2))
plot(c(100, 345), c(300, 450), type = "n", xlab="", ylab="", xaxt='n', yaxt='n')
title('CONFUSION MATRIX', cex.main=2)
# create the matrix
classes = colnames(cm$table)
rect(150, 430, 240, 370, col=getColor("green", res[1]))
text(195, 435, classes[1], cex=1.2)
rect(250, 430, 340, 370, col=getColor("red", res[3]))
text(295, 435, classes[2], cex=1.2)
text(125, 370, 'Predicted', cex=1.3, srt=90, font=2)
text(245, 450, 'Actual', cex=1.3, font=2)
rect(150, 305, 240, 365, col=getColor("red", res[2]))
rect(250, 305, 340, 365, col=getColor("green", res[4]))
text(140, 400, classes[1], cex=1.2, srt=90)
text(140, 335, classes[2], cex=1.2, srt=90)
# add in the cm results
text(195, 400, res[1], cex=1.6, font=2, col='white')
text(195, 335, res[2], cex=1.6, font=2, col='white')
text(295, 400, res[3], cex=1.6, font=2, col='white')
text(295, 335, res[4], cex=1.6, font=2, col='white')
# add in the specifics
plot(c(100, 0), c(100, 0), type = "n", xlab="", ylab="", main = "DETAILS", xaxt='n', yaxt='n')
# add in the accuracy information
text(30, 35, names(cm$overall[1]), cex=1.5, font=2)
text(30, 20, round(as.numeric(cm$overall[1]), 3), cex=1.4)
text(70, 35, names(cm$overall[2]), cex=1.5, font=2)
text(70, 20, round(as.numeric(cm$overall[2]), 3), cex=1.4)
}
cm = confusionMatrix(test$NBA_3Pt_Predict_logistic, test$above36)
draw_confusion_matrix(cm)
draw_confusion_matrix <- function(cm) {
total <- sum(cm$table)
res <- as.numeric(cm$table)
# Generate color gradients. Palettes come from RColorBrewer.
greenPalette <- c("#F7FCF5","#E5F5E0","#C7E9C0","#A1D99B","#74C476","#41AB5D","#238B45","#006D2C","#00441B")
redPalette <- c("#FFF5F0","#FEE0D2","#FCBBA1","#FC9272","#FB6A4A","#EF3B2C","#CB181D","#A50F15","#67000D")
getColor <- function (greenOrRed = "green", amount = 0) {
if (amount == 0)
return("#FFFFFF")
palette <- greenPalette
if (greenOrRed == "red")
palette <- redPalette
colorRampPalette(palette)(100)[10 + ceiling(90 * amount / total)]
}
# set the basic layout
layout(matrix(c(1,1,2)))
par(mar=c(2,2,2,2))
plot(c(100, 345), c(300, 450), type = "n", xlab="", ylab="", xaxt='n', yaxt='n')
title('CONFUSION MATRIX', cex.main=2)
# create the matrix
classes = colnames(cm$table)
rect(150, 430, 240, 370, col=getColor("green", res[1]))
text(195, 435, classes[1], cex=1.2)
rect(250, 430, 340, 370, col=getColor("red", res[3]))
text(295, 435, classes[2], cex=1.2)
text(125, 370, 'Predicted', cex=1.3, srt=90, font=2)
text(245, 450, 'Actual', cex=1.3, font=2)
rect(150, 305, 240, 365, col=getColor("red", res[2]))
rect(250, 305, 340, 365, col=getColor("green", res[4]))
text(140, 400, classes[1], cex=1.2, srt=90)
text(140, 335, classes[2], cex=1.2, srt=90)
# add in the cm results
text(195, 400, res[1], cex=1.6, font=2, col='white')
text(195, 335, res[2], cex=1.6, font=2, col='white')
text(295, 400, res[3], cex=1.6, font=2, col='white')
text(295, 335, res[4], cex=1.6, font=2, col='white')
# add in the specifics
plot(c(100, 0), c(100, 0), type = "n", xlab="", ylab="", main = "DETAILS", xaxt='n', yaxt='n')
# add in the accuracy information
text(30, 35, names(cm$overall[1]), cex=1.5, font=2)
text(30, 20, round(as.numeric(cm$overall[1]), 3), cex=1.4)
}
cm = confusionMatrix(test$NBA_3Pt_Predict_logistic, test$above36)
draw_confusion_matrix(cm)
draw_confusion_matrix <- function(cm) {
total <- sum(cm$table)
res <- as.numeric(cm$table)
# Generate color gradients. Palettes come from RColorBrewer.
greenPalette <- c("#F7FCF5","#E5F5E0","#C7E9C0","#A1D99B","#74C476","#41AB5D","#238B45","#006D2C","#00441B")
redPalette <- c("#FFF5F0","#FEE0D2","#FCBBA1","#FC9272","#FB6A4A","#EF3B2C","#CB181D","#A50F15","#67000D")
getColor <- function (greenOrRed = "green", amount = 0) {
if (amount == 0)
return("#FFFFFF")
palette <- greenPalette
if (greenOrRed == "red")
palette <- redPalette
colorRampPalette(palette)(100)[10 + ceiling(90 * amount / total)]
}
# set the basic layout
layout(matrix(c(1,1,2)))
par(mar=c(2,2,2,2))
plot(c(100, 345), c(300, 450), type = "n", xlab="", ylab="", xaxt='n', yaxt='n')
title('CONFUSION MATRIX', cex.main=2)
# create the matrix
classes = colnames(cm$table)
rect(150, 430, 240, 370, col=getColor("green", res[1]))
text(195, 435, classes[1], cex=1.2)
rect(250, 430, 340, 370, col=getColor("red", res[3]))
text(295, 435, classes[2], cex=1.2)
text(125, 370, 'Predicted', cex=1.3, srt=90, font=2)
text(245, 450, 'Actual', cex=1.3, font=2)
rect(150, 305, 240, 365, col=getColor("red", res[2]))
rect(250, 305, 340, 365, col=getColor("green", res[4]))
text(140, 400, classes[1], cex=1.2, srt=90)
text(140, 335, classes[2], cex=1.2, srt=90)
# add in the cm results
text(195, 400, res[1], cex=1.6, font=2, col='white')
text(195, 335, res[2], cex=1.6, font=2, col='white')
text(295, 400, res[3], cex=1.6, font=2, col='white')
text(295, 335, res[4], cex=1.6, font=2, col='white')
# add in the specifics
# plot(c(100, 0), c(100, 0), type = "n", xlab="", ylab="", main = "DETAILS", xaxt='n', yaxt='n')
# add in the accuracy information
text(30, 35, names(cm$overall[1]), cex=1.5, font=2)
text(30, 20, round(as.numeric(cm$overall[1]), 3), cex=1.4)
}
draw_confusion_matrix(cm)
ggplot(above36_3ptpct, aes(x = NCAA_3Pt_Pct)) + geom_histogram() + ggtitle("3 point percentage in NCAA for NBA players shooting about 36% from 3") + xlab("NCAA 3 point percentage") + xlim(0,1) + geom_vline(xintercept = 0.36)+ theme_economist()
above36_3ptpct = subset(players_final, NBA_3Pt_Pct >= 0.36)
below36_3ptpct = subset(players_final, NBA_3Pt_Pct < 0.36)
ggplot(above36_3ptpct, aes(x = NCAA_3Pt_Pct)) + geom_histogram() + ggtitle("3 point percentage in NCAA for NBA players shooting about 36% from 3") + xlab("NCAA 3 point percentage") + xlim(0,1) + geom_vline(xintercept = 0.36)+ theme_economist() + scale_color_economist()
ggplot(below36_3ptpct, aes(x = NCAA_3Pt_Pct)) + geom_histogram() + ggtitle("3 point percentage in NCAA for NBA players shooting below 36% from 3") + xlab("NCAA 3 point percentage") + theme_economist() + scale_color_economist() + xlim(0,1) + geom_vline(xintercept = 0.36)
ggplot(above36_3ptpct, aes(x = NCAA_3Pt_Pct)) + geom_histogram() + ggtitle("3 point percentage in NCAA for NBA players \nshooting above 36% from 3") + xlab("NCAA 3 point percentage") + xlim(0,1) + geom_vline(xintercept = 0.36)+ theme_economist() + scale_color_economist()
ggplot(above36_3ptpct, aes(x = NCAA_3Pt_Pct)) + geom_histogram() + ggtitle("3 point percentage in NCAA for NBA players \nshooting above 36% from 3") + xlab("NCAA 3 point percentage") + xlim(0,1) + geom_vline(xintercept = 0.36)+ theme_economist() + scale_color_economist() + theme(plot.title = element_text(hjust = 0.5))
above36_3ptpct = subset(players_final, NBA_3Pt_Pct >= 0.36)
below36_3ptpct = subset(players_final, NBA_3Pt_Pct < 0.36)
ggplot(above36_3ptpct, aes(x = NCAA_3Pt_Pct)) + geom_histogram() + ggtitle("3 point percentage in NCAA for NBA players \nshooting above 36% from 3") + xlab("NCAA 3 point percentage") + xlim(0,1) + geom_vline(xintercept = 0.36)+ theme_economist() + scale_color_economist() + theme(plot.title = element_text(hjust = 0.5))
ggplot(below36_3ptpct, aes(x = NCAA_3Pt_Pct)) + geom_histogram() + ggtitle("3 point percentage in NCAA for NBA players \nshooting below 36% from 3") + xlab("NCAA 3 point percentage") + theme_economist() + scale_color_economist() + xlim(0,1) + geom_vline(xintercept = 0.36)  + theme(plot.title = element_text(hjust = 0.5))
ggplot(players_final, aes(x = Position)) + geom_bar() + theme_economist() + scale_color_economist()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggplot2)
library(ggthemes)
library(kableExtra)
library(devtools)
devtools::install_github('cttobin/ggthemr')
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggplot2)
library(ggthemes)
library(kableExtra)
library(devtools)
devtools::install_github('cttobin/ggthemr')
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggplot2)
library(ggthemes)
library(kableExtra)
library(devtools)
devtools::install_github('cttobin/ggthemr')
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggplot2)
library(ggthemes)
library(kableExtra)
library(devtools)
devtools::install_github('cttobin/ggthemr')
#library(ggthemr)
players = read_csv("players_updated.csv")
players$diff_ft = players$nba_ft - players$ncaa_ft
players$diff_fg = players$nba_fg - players$ncaa_fgpct
players$diff_3ptpct = players$nba_3ptpct - players$ncaa_3ptpct
players$diff_efg = players$nba_efgpct - players$ncaa_efgpct
players_shooting = select(players, name, position, height_inches, weight, nba_ppg, ncaa_ppg, nba_ft, ncaa_ft, diff_ft, nba_3ptpct, ncaa_3ptpct, diff_3ptpct, nba_3ptpg, ncaa_3ptpg, nba_fg, ncaa_fgpct, diff_fg, nba_fg_per_game, ncaa_fgpg, nba_efgpct, ncaa_efgpct, diff_efg)
names(players_shooting) = c("Name", "Position", "Height_Inches", "Weight", "NBA_PPG", "NCAA_PPG", "NBA_FT_Pct", "NCAA_FT_Pct", "Diff_FT_Pct", "NBA_3Pt_Pct", "NCAA_3Pt_Pct", "Diff_3Pt_Pct", "NBA_3Pt_PG", "NCAA_3Pt_PG", "NBA_FG_Pct", "NCAA_FG_Pct", "Diff_FG_Pct", "NBA_FG_PG", "NCAA_FG_PG", "NBA_EFG_Pct", "NCAA_EFG_Pct", "Diff_EFG_Pct")
players_shooting %>% filter(Name %in% c("George Mikan", "Rick Barry", "Magic Johnson", "Kobe Bryant", "Stephen Curry", "Giannis Antetokounmpo", "Michael Jordan", "Kawhi Leonard")) %>% kable() %>%
kable_styling()
players_final = players_shooting %>%
filter(!is.na(Diff_FT_Pct)) %>%
filter(!is.na(Diff_FG_Pct)) %>%
filter(!is.na(Diff_3Pt_Pct)) %>%
filter(!is.na(Diff_EFG_Pct))
head(players_final, n = 5)%>% kable() %>%
kable_styling()
players_final$above36 = players_final$NBA_3Pt_Pct >= 0.36
players_final$above36 = as.integer(as.logical(players_final$above36))
players_final_noOutliers = players_final %>%
filter(NBA_3Pt_Pct > 0) %>%
filter(NBA_3Pt_Pct < 1)
players_final_subset = players_final_noOutliers[,c(10, 23, 2, 3, 4, 6, 8, 11, 14, 16, 19, 21)]
write.csv(x=players_final_subset, file="final_shooting")
write.csv(x=players_final_subset, file="final_shooting.csv")
head(players_final_subset)
knitr::opts_chunk$set(echo = TRUE)
ggplot(data = data, aes(x = Lon, y = Lat)) +
+ stat_binhex() +
scale_x_continuous(limits = c(min_long, max_long)) +
scale_y_continuous(limits = c(min_lat, max_lat)) +
ggtitle("NYC Map Based on Uber Rides in 2014 (Apr-Sep)") +
xlab("Longitude") +
ylab("Latitude")
ggplot(data = data, aes(x = Lon, y = Lat)) +
stat_binhex() +
scale_x_continuous(limits = c(min_long, max_long)) +
scale_y_continuous(limits = c(min_lat, max_lat)) +
ggtitle("NYC Map Based on Uber Rides in 2014 (Apr-Sep)") +
xlab("Longitude") +
ylab("Latitude")
apr = read_csv('data/uber-raw-data-apr14.csv')
may = read_csv('data/uber-raw-data-may14.csv')
jun = read_csv('data/uber-raw-data-jun14.csv')
jul = read_csv('data/uber-raw-data-jul14.csv')
aug = read_csv('data/uber-raw-data-aug14.csv')
sep = read_csv('data/uber-raw-data-sep14.csv')
data = rbind(apr, may, jun, jul, aug, sep)
names(data)[1] = 'DateTime'
head(data)
data$DateTime = as.POSIXct(data$DateTime, format = "%m/%d/%Y %H:%M:%S")
#data$DateTime = mdy_hms(data$DateTime)
data$Day = factor(day(data$DateTime))
ggplot(data = data, aes(x = Lon, y = Lat)) +
stat_binhex() +
scale_x_continuous(limits = c(min_long, max_long)) +
scale_y_continuous(limits = c(min_lat, max_lat)) +
ggtitle("NYC Map Based on Uber Rides in 2014 (Apr-Sep)") +
xlab("Longitude") +
ylab("Latitude")
min_lat = min(data$Lat) + 0.5
max_lat = max(data$Lat) - 1
min_long = min(data$Lon) + 0.5
max_long = max(data$Lon) - 1
ggplot(data = data, aes(x = Lon, y = Lat)) +
stat_binhex() +
scale_x_continuous(limits = c(min_long, max_long)) +
scale_y_continuous(limits = c(min_lat, max_lat)) +
ggtitle("NYC Map Based on Uber Rides in 2014 (Apr-Sep)") +
xlab("Longitude") +
ylab("Latitude")
library(hexbin)
ggplot(data = data, aes(x = Lon, y = Lat)) +
geom_hex(bins = 60) +
scale_x_continuous(limits = c(min_long, max_long)) +
scale_y_continuous(limits = c(min_lat, max_lat)) +
ggtitle("NYC Map Based on Uber Rides in 2014 (Apr-Sep)") +
xlab("Longitude") +
ylab("Latitude")
ggplot(data = data, aes(x = Lon, y = Lat)) +
geom_hex(bins = 60) +
scale_x_continuous(limits = c(min_long, max_long)) +
scale_y_continuous(limits = c(min_lat, max_lat)) +
ggtitle("NYC Map Based on Uber Rides in 2014 (Apr-Sep)") +
xlab("Longitude") +
ylab("Latitude")
install.packages("hexbin")
library(hexbin)
install.packages("hexbin")
install.packages(c("hexbin", "maps"))
library(hexbin)
library(hexbin)
