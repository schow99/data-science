}
results[i,] = current_row
}
results$vegas_spread_prediction = results$spread_favorite
for (i in 1:nrow(results)){
current_row = results[i,]
if(current_row$team_home == current_row$team_favorite_id){
current_row$vegas_spread = abs(current_row$spread_favorite)
}
results[i,] = current_row
}
View(results)
results$vegas_spread_prediction = results$spread_favorite
for (i in 1:nrow(results)){
current_row = results[i,]
if(current_row$team_home == current_row$team_favorite_id){
current_row$vegas_spread_prediction = abs(current_row$spread_favorite)
}
results[i,] = current_row
}
results$true_spread = 0
for (i in 1:nrow(results)){
current_row = results[i,]
current_row$true_result = current_row$score_home - current_row$score_away
results[i,] = current_row
}
results$true_spread = 0
for (i in 1:nrow(results)){
current_row = results[i,]
current_row$true_spread = current_row$score_home - current_row$score_away
results[i,] = current_row
}
results$true_total = 0
for (i in 1:nrow(results)){
current_row = results[i,]
current_row$true_result = current_row$score_home + current_row$score_away
results[i,] = current_row
}
results$true_total = 0
for (i in 1:nrow(results)){
current_row = results[i,]
current_row$true_total = current_row$score_home + current_row$score_away
results[i,] = current_row
}
View(off_stats)
home_off = off_stats
colnames(home_off) = paste("home", colnames(home_off), sep = "_")
away_off = off_stats
colnames(away_off) = paste("away", colnames(away_off), sep = "_")
home_def = def_stats
colnames(home_def) = paste("home", colnames(home_def), sep = "_")
away_def = def_stats
colnames(away_def) = paste("away", colnames(away_def), sep = "_")
View(home_off)
home_off = off_stats
colnames(home_off) = paste("home", colnames(home_off), sep = "_")
away_off = off_stats
colnames(away_off) = paste("away", colnames(away_off), sep = "_")
home_def = def_stats
colnames(home_def) = paste("home", colnames(home_def), sep = "_")
away_def = def_stats
colnames(away_def) = paste("away", colnames(away_def), sep = "_")
final_results = left_join(results, home_off, by = c("team_home" = "home_off_Tm", "schedule_season" = "home_off_season")) %>%
left_join(., away_off, by = c("team_away" = "away_off_Tm", "schedule_season" = "away_off_season")) %>%
left_join(., home_def, by = c("team_home" = "home_def_Tm", "schedule_season" = "home_def_season")) %>%
left_join(., away_def, by = c("team_away" = "away_def_Tm", "schedule_season"= "away_def_season"))
View(final_results)
final_results = subset(final_results, select = -c(X, weather_humidity))
apply(final_results, 2, function(x) any(is.na(x)))
final_results$weather_temperature[is.na(final_results$weather_temperature)] = mean(final_results$weather_temperature, na.rm = TRUE)
write.csv(final_results, 'cleaned_data_short.csv', row.names = FALSE)
library(readr)
library(dplyr)
library(caTools)
library(caret)
setwd("C:/Users/samue/OneDrive/UNC 2020-21/Fall/Stor 538/Playoffs 2")
results = read.csv("cleaned_data_short.csv")
sample = sample.split(final_results, SplitRatio = 0.75)
train = subset(final_results, sample == TRUE)
test = subset(final_results, sample == FALSE)
# Fit the full model
full_model = lm(score ~., data = train)
results = subset(results_full, -c(score_home, score_away))
results_full = read.csv("cleaned_data_short.csv")
results = subset(results_full, -c(score_home, score_away))
results = subset(results_full, select = -c(score_home, score_away))
View(results)
sample = sample.split(final_results, SplitRatio = 0.75)
train = subset(final_results, sample == TRUE)
test = subset(final_results, sample == FALSE)
# Fit the full model
full_model = lm(true_spread ~., data = train)
# Stepwise regression model
step_model = MASS::stepAIC(full_model, direction = "both",trace = F)
summary(step_model)
View(final_results)
sample = sample.split(results, SplitRatio = 0.75)
train = subset(results, sample == TRUE)
test = subset(results, sample == FALSE)
# Fit the full model
full_model = lm(true_spread ~., data = train)
# Stepwise regression model
step_model = MASS::stepAIC(full_model, direction = "both",trace = F)
apply(train, 2, function(x) any(is.na(x)))
sum(apply(train, 2, function(x) any(is.na(x))))
apply(train, 2, function(x) any(is.na(x)))
final_results$weather_temperature[is.na(final_results$weather_temperature)] = mean(final_results$weather_temperature, na.rm = TRUE)
final_results$weather_wind_mph[is.na(final_results$weather_wind_mph)] = mean(final_results$weather_wind_mph, na.rm = TRUE)
write.csv(final_results, 'cleaned_data_short.csv', row.names = FALSE)
setwd("C:/Users/samue/OneDrive/UNC 2020-21/Fall/Stor 538/Playoffs 2")
results_full = read.csv("cleaned_data_short.csv")
results = subset(results_full, select = -c(score_home, score_away))
sample = sample.split(results, SplitRatio = 0.75)
train = subset(results, sample == TRUE)
test = subset(results, sample == FALSE)
apply(train, 2, function(x) any(is.na(x)))
sum(apply(train, 2, function(x) any(is.na(x))))
sum(apply(train, 2, function(x) any(is.na(x))))
# Fit the full model
full_model = lm(true_spread ~., data = train)
# Stepwise regression model
step_model = MASS::stepAIC(full_model, direction = "both",trace = F)
summary(step_model)
lm1 = lm(formula = true_spread ~ spread_favorite + over_under_line +
true_total + home_off_Ply + home_off_Y.P + home_off_Yds.1 +
home_off_TD + home_off_Att.1 + home_off_Y.A + home_off_X1stD.2 +
away_off_PF + away_off_Ply + away_off_Yds.1 + away_off_NY.A +
away_off_Att.1 + away_off_Pen + away_off_Sc. + home_def_Rk +
home_def_Ply + home_def_Y.P + home_def_X1stD + home_def_Att +
home_def_Yds.1 + home_def_TD + home_def_TD.1 + home_def_Y.A +
home_def_EXP + away_def_Rk + away_def_PF + away_def_Yds +
away_def_Y.P + away_def_Att + away_def_Att.1, data = train)
summary(lm1)
RMSE(lm_predict_train, train$true_spread)
lm_predict_train = predict(lm1, train)
lm_predict_test = predict(lm1, test)
RMSE(lm_predict_train, train$true_spread)
RMSE(lm_predict_test, train$true_spread)
RMSE(lm_predict_test, test$true_spread)
lm_predict_train = predict(lm1, train)
lm_predict_test = predict(lm1, test)
RMSE(lm_predict_train, train$true_spread)
RMSE(lm_predict_test, test$true_spread)
lm_predict_train = predict(lm1, train)
lm_predict_test = predict(lm1, test)
RMSE(lm_predict_train, train$true_spread)
RMSE(lm_predict_test, test$true_spread)
RMSE(train$vegas_spread_prediction, train$true_spread)
RMSE(test$vegas_spread_prediction, test$true_spread)
rf1 = randomForest(true_spread ~., data = train, trControl = control, metric = "RMSE", importance = T)
library(randomForest)
control = trainControl(method = "cv", number = 10, repeats = 3)
rf1 = randomForest(true_spread ~., data = train, trControl = control, metric = "RMSE", importance = T)
#importance(rf1)
importance(rf1)[order(-importance(rf1)[, 1]),]
rf_predict_train = predict(rf1, train)
rf_predict_test = predict(rf1, test)
RMSE(rf_predict_train, train$true_spread)
RMSE(rf_predict_test, test$true_spread)
RMSE(train$vegas_spread_prediction, train$true_spread)
RMSE(test$vegas_spread_prediction, test$true_spread)
#importance(rf1)
importance(rf1)[order(-importance(rf1)[, 1]),]
library(xgboost)
train_x = data.matrix(subset(train, select = -c(true_spread)))
train_y = train$true_spread
test_x = data.matrix(subset(test, select = -c(true_spread)))
test_y = test$true_spread
xgb_train = xgb.DMatrix(data = train_x, label = train_y)
xgb_test = xgb.DMatrix(data = test_x, label = test_y)
xgb_trcontrol = trainControl(
method = "cv",
number = 5,
allowParallel = TRUE,
verboseIter = FALSE,
returnData = FALSE
)
xgbGrid = expand.grid(nrounds = c(100,200),  # this is n_estimators in the python code above
max_depth = c(10, 15, 20, 25),
colsample_bytree = seq(0.5, 0.9, length.out = 5),
## The values below are default values in the sklearn-api.
eta = 0.1,
gamma=0,
min_child_weight = 1,
subsample = 1
)
set.seed(0)
xgb_model = train(
train_x, train_y,
trControl = xgb_trcontrol,
# tuneGrid = xgbGrid,
method = "xgbTree"
)
set.seed(0)
xgb_model = train(
train_x, train_y,
trControl = xgb_trcontrol,
# tuneGrid = xgbGrid,
method = "xgbTree"
)
set.seed(0)
xgb_model = train(
train_x, train_y,
trControl = xgb_trcontrol,
# tuneGrid = xgbGrid,
method = "xgbTree"
)
set.seed(0)
xgb_model = train(
train_x, train_y,
trControl = xgb_trcontrol,
# tuneGrid = xgbGrid,
method = "xgbTree"
)
xgb.importance(xgb_model$finalModel$feature_names,model=xgb_model$finalModel)
knitr::opts_chunk$set(echo = TRUE)
#devtools::install_github("jflancer/bigballR")
library(tidyverse)
library(bigballR)
schedule = get_team_schedule(season = "2020-21", team.name = "North Carolina")
play_by_play = get_play_by_play(schedule$Game_ID)
play_by_play$Date[play_by_play$ID == 4982651] = "11/25/2020"
lineups = get_lineups(play_by_play_data = play_by_play, keep.dirty = T, garbage.filter = F) %>% filter(Team == "North Carolina")
lineups
write.csv(lineups, file = "unc_lineups_2020_21.csv", row.names = F)
player_stats = get_player_stats(play_by_play) %>%
filter(Team == "North Carolina")
player_stats = get_player_stats(play_by_play)
play_by_play$Date[play_by_play$ID == 4984928] = "12/12/2020"
lineups = get_lineups(play_by_play_data = play_by_play, keep.dirty = T, garbage.filter = F) %>% filter(Team == "North Carolina")
lineups
write.csv(lineups, file = "unc_lineups_2020_21.csv", row.names = F)
player_stats = get_player_stats(play_by_play) %>%
filter(Team == "North Carolina")
write.csv(player_stats, file = "unc_player_stats_2020_21.csv", row.names = F)
write.csv(player_stats, file = "unc_player_stats_2020_21.csv", row.names = F)
shiny::runApp('C:/Users/samue/OneDrive/Personal Projects/Data Science/Shiny/UNC Basketball')
runApp('C:/Users/samue/OneDrive/Personal Projects/Data Science/Shiny/UNC Basketball')
runApp('C:/Users/samue/OneDrive/Personal Projects/Data Science/Shiny/UNC Basketball')
install.packages("shinyWidgets")
runApp('C:/Users/samue/OneDrive/Personal Projects/Data Science/Shiny/UNC Basketball')
runApp('C:/Users/samue/OneDrive/Personal Projects/Data Science/Shiny/UNC Basketball')
runApp('C:/Users/samue/OneDrive/Personal Projects/Data Science/Shiny/UNC Basketball')
lineups = get_lineups(play_by_play_data = play_by_play, keep.dirty = T, garbage.filter = F) %>% filter(Team == "North Carolina")
lineups = get_lineups(play_by_play_data = play_by_play, keep.dirty = T, garbage.filter = F) %>% filter(Team == "North Carolina")
runApp('C:/Users/samue/OneDrive/Personal Projects/Data Science/Shiny/UNC Basketball')
unique(play_by_play$ID)
game_ids = unique(play_by_play$ID)
lineups_by_game = data.frame()
for(i in 1:length(game_ids)){
game = get_lineups(play_by_play_data = play_by_play %>% filter(ID = game_ids[i]))
lineups_by_game = rbind(lineups_by_game, game)
}
game_ids = unique(play_by_play$ID)
lineups_by_game = data.frame()
for(i in 1:length(game_ids)){
game = get_lineups(play_by_play_data = play_by_play %>% filter(ID == game_ids[i]))
lineups_by_game = rbind(lineups_by_game, game)
}
View(lineups_by_game)
game_ids = unique(play_by_play$ID)
lineups_by_game = data.frame()
for(i in 1:length(game_ids)){
game_play_by_play = play_by_play %>%
filter(ID == game_ids[i])
game = get_lineups(play_by_play_data = game_play_by_play, keep.dirty = T, garbage.filter = F) %>%
filter(Team == "North Carolina")
opponent = c(game_play_by_play$Home[1], game_play_by_play$Away[1])
opponent = opponent[opponent != "North Carolina"]
game$Opponent = opponent
lineups_by_game = rbind(lineups_by_game, game)
}
lineups_by_game %>%
arrange(desc(Mins))
lineups_by_game %>%
arrange(desc(Mins)) %>%
select(P1, P2, P3, P4, P5, Mins, NETRTG, Opponent )
write.csv(lineups_by_game, file = "unc_lineups_by_game_2020_21.csv", row.names = F)
runApp('C:/Users/samue/OneDrive/Personal Projects/Data Science/Shiny/UNC Basketball')
opponents = c("Col. of Charleston", "Stanford")
lineup_selection[lineup_selection$Opponent %in% opponents,]
opponents = c("Col. of Charleston", "Stanford")
lineup_selection[lineup_selection$Opponent %in% opponents,]
opponents = c("Col. of Charleston", "Stanford")
lineups_by_game[lineups_by_game$Opponent %in% opponents,]
opponents = c("Col. of Charleston")
lineups_by_game[lineups_by_game$Opponent %in% opponents,]
lineups_by_game[lineups_by_game$Opponent %in% opponents,] %>%
arrange(desc(Mins))
lineups_by_game[lineups_by_game$Opponent %in% opponents,] %>%
arrange(desc(Mins)) %>%
select(P1, P2, P3, P4, P5, Mins)
lineups_by_game[lineups_by_game$Opponent %in% opponents,] %>%
arrange(desc(Mins)) %>%
select(P1, P2, P3, P4, P5, Mins, Opponent)
opponents = c("Col. of Charleston", "Stanford")
lineups_by_game[lineups_by_game$Opponent %in% opponents,] %>%
arrange(desc(Mins)) %>%
select(P1, P2, P3, P4, P5, Mins, Opponent)
create_lineup = function(lineup_whole){
final_lineup = data.frame()
final_lineup$P1 = lineup_whole$P1
final_lineup$P2 = lineup_whole$P2
final_lineup$P3 = lineup_whole$P3
final_lineup$P4 = lineup_whole$P4
final_lineup$P5 = lineup_whole$P5
final_lineup$Mins = lineup_whole %>%
group_by(P1, P2, P3, P4, P5) %>%
summarise(Mins = sum(Mins))
return (final_lineup)
}
create_lineup(lineups_by_game)
create_lineup(lineups_by_game)
create_lineup = function(lineup_whole){
final_lineup = data.frame()
unique_lineups = unique(lineup_whole[, c("P1", "P2", "P3", "P4", "P5")])
#
# final_lineup$P1 = lineup_whole$P1
# final_lineup$P2 = lineup_whole$P2
# final_lineup$P3 = lineup_whole$P3
# final_lineup$P4 = lineup_whole$P4
# final_lineup$P5 = lineup_whole$P5
#
# final_lineup$Mins = lineup_whole %>%
#   group_by(P1, P2, P3, P4, P5) %>%
#   summarise(Mins = sum(Mins))
#
return (unique_lineups)
}
create_lineup(lineups_by_game)
create_lineup = function(lineup_whole){
final_lineup = data.frame()
unique_lineups = unique(lineup_whole[, c("P1", "P2", "P3", "P4", "P5")])
#
# final_lineup$P1 = lineup_whole$P1
# final_lineup$P2 = lineup_whole$P2
# final_lineup$P3 = lineup_whole$P3
# final_lineup$P4 = lineup_whole$P4
# final_lineup$P5 = lineup_whole$P5
#
# final_lineup$Mins = lineup_whole %>%
#   group_by(P1, P2, P3, P4, P5) %>%
#   summarise(Mins = sum(Mins))
#
return (unique_lineups)
}
create_lineup(lineups)
opponents = c("Col. of Charleston", "Stanford")
lineups_by_game = lineups_by_game[lineups_by_game$Opponent %in% opponents,] %>%
arrange(desc(Mins)) %>%
select(P1, P2, P3, P4, P5, Mins, Opponent)
create_lineup = function(lineup_whole){
final_lineup = data.frame()
unique_lineups = unique(lineup_whole[, c("P1", "P2", "P3", "P4", "P5")])
#
# final_lineup$P1 = lineup_whole$P1
# final_lineup$P2 = lineup_whole$P2
# final_lineup$P3 = lineup_whole$P3
# final_lineup$P4 = lineup_whole$P4
# final_lineup$P5 = lineup_whole$P5
#
# final_lineup$Mins = lineup_whole %>%
#   group_by(P1, P2, P3, P4, P5) %>%
#   summarise(Mins = sum(Mins))
#
return (unique_lineups)
}
create_lineup(lineups_by_game)
runApp('C:/Users/samue/OneDrive/Personal Projects/Data Science/Shiny/UNC Basketball')
rsconnect::deployApp('C:/Users/samue/OneDrive/Personal Projects/Data Science/Shiny/UNC Basketball')
schedule = get_team_schedule(season = "2020-21", team.name = "North Carolina")
play_by_play = get_play_by_play(schedule$Game_ID)
play_by_play$Date[play_by_play$ID == 4982651] = "11/25/2020"
play_by_play$Date[play_by_play$ID == 4984928] = "12/12/2020"
play_by_play = get_play_by_play(schedule$Game_ID)
play_by_play = get_play_by_play(schedule$Game_ID)
play_by_play = get_play_by_play(schedule$Game_ID)
play_by_play = get_play_by_play(schedule$Game_ID)
runApp('C:/Users/samue/OneDrive/Personal Projects/Data Science/Shiny/UNC Basketball')
runApp('C:/Users/samue/OneDrive/Personal Projects/Data Science/Shiny/UNC Basketball')
runApp('C:/Users/samue/OneDrive/Personal Projects/Data Science/Shiny/UNC Basketball')
schedule = get_team_schedule(season = "2020-21", team.name = "North Carolina")
play_by_play = get_play_by_play(schedule$Game_ID)
play_by_play$Date[play_by_play$ID == 4982651] = "11/25/2020"
play_by_play$Date[play_by_play$ID == 4984928] = "12/12/2020"
schedule = get_team_schedule(season = "2020-21", team.name = "North Carolina")
play_by_play = get_play_by_play(schedule$Game_ID)
play_by_play$Date[play_by_play$ID == 4982651] = "11/25/2020"
play_by_play$Date[play_by_play$ID == 4984928] = "12/12/2020"
play_by_play$Date[play_by_play$ID == 4986554] = "12/22/2020"
lineups = get_lineups(play_by_play_data = play_by_play, keep.dirty = T, garbage.filter = F) %>% filter(Team == "North Carolina") %>% filter (ID = 4986554)
lineups = get_lineups(play_by_play_data = play_by_play, keep.dirty = T, garbage.filter = F) %>% filter(Team == "North Carolina") %>% filter (ID == 4986554)
lineups = get_lineups(play_by_play_data = play_by_play %>% filter (ID == 4986554), keep.dirty = T, garbage.filter = F) %>% filter(Team == "North Carolina")
write.csv(lineups, file = "unc_lineups_2020_21.csv", row.names = F)
runApp('C:/Users/samue/OneDrive/Personal Projects/Data Science/Shiny/UNC Basketball')
max(lineups$Mins)
max(lineups$Mins)
runApp('C:/Users/samue/OneDrive/Personal Projects/Data Science/Shiny/UNC Basketball')
lineups = get_lineups(play_by_play_data = play_by_play, keep.dirty = T, garbage.filter = F) %>% filter(Team == "North Carolina")
write.csv(lineups, file = "unc_lineups_2020_21.csv", row.names = F)
runApp('C:/Users/samue/OneDrive/Personal Projects/Data Science/Shiny/UNC Basketball')
rsconnect::deployApp('C:/Users/samue/OneDrive/Personal Projects/Data Science/Shiny/UNC Basketball')
y
runApp('C:/Users/samue/OneDrive/Personal Projects/Data Science/Shiny/UNC Basketball')
runApp('C:/Users/samue/OneDrive/Personal Projects/Data Science/Shiny/UNC Basketball')
player_stats %>%
filter(Player == "ARMANDO.BACOT")
player_stats %>%
filter(Player == "ARMANDO.BACOT") %>%
summarize(sum = sum(FGA))
player_stats %>%
filter(Player == "ARMANDO.BACOT")
player_stats = get_player_stats(play_by_play) %>%
filter(Team == "North Carolina")
write.csv(player_stats, file = "unc_player_stats_2020_21.csv", row.names = F)
player_stats %>%
filter(Player == "ARMANDO.BACOT")
runApp('C:/Users/samue/OneDrive/Personal Projects/Data Science/Shiny/UNC Basketball')
knitr::opts_chunk$set(echo = TRUE)
schedule = get_team_schedule(season = "2020-21", team.name = "North Carolina")
#devtools::install_github("jflancer/bigballR")
library(tidyverse)
library(bigballR)
schedule = get_team_schedule(season = "2020-21", team.name = "North Carolina")
play_by_play = get_play_by_play(schedule$Game_ID)
play_by_play$Date[play_by_play$ID == 4982651] = "11/25/2020"
play_by_play$Date[play_by_play$ID == 4984928] = "12/12/2020"
play_by_play$Date[play_by_play$ID == 4986554] = "12/22/2020"
game_ids = unique(play_by_play$ID)
lineups_by_game = data.frame()
for(i in 1:length(game_ids)){
game_play_by_play = play_by_play %>%
filter(ID == game_ids[i])
game = get_lineups(play_by_play_data = game_play_by_play, keep.dirty = T, garbage.filter = F) %>%
filter(Team == "North Carolina")
opponent = c(game_play_by_play$Home[1], game_play_by_play$Away[1])
opponent = opponent[opponent != "North Carolina"]
game$Opponent = opponent
lineups_by_game = rbind(lineups_by_game, game)
}
lineups = get_lineups(play_by_play_data = play_by_play, keep.dirty = T, garbage.filter = F) %>% filter(Team == "North Carolina")
lineups
write.csv(lineups, file = "unc_lineups_2020_21.csv", row.names = F)
#write.csv(lineups_by_game, file = "unc_lineups_by_game_2020_21.csv", row.names = F)
player_stats = get_player_stats(play_by_play) %>%
filter(Team == "North Carolina")
write.csv(player_stats, file = "unc_player_stats_2020_21.csv", row.names = F)
shiny::runApp('C:/Users/samue/OneDrive/Personal Projects/Data Science/Shiny/UNC Basketball')
rsconnect::deployApp('C:/Users/samue/OneDrive/Personal Projects/Data Science/Shiny/UNC Basketball')
schedule = get_team_schedule(season = "2020-21", team.name = "North Carolina")
play_by_play = get_play_by_play(schedule$Game_ID)
play_by_play$Date[play_by_play$ID == 4982651] = "11/25/2020"
play_by_play$Date[play_by_play$ID == 4984928] = "12/12/2020"
play_by_play$Date[play_by_play$ID == 4986554] = "12/22/2020"
play_by_play$Date[play_by_play$ID == 4987311] = "01/02/2021"
lineups = get_lineups(play_by_play_data = play_by_play, keep.dirty = T, garbage.filter = F) %>% filter(Team == "North Carolina") %>% filter(ID == 4987311)
lineups = get_lineups(play_by_play_data = play_by_play %>% filter(ID == 4987311), keep.dirty = T, garbage.filter = F) %>% filter(Team == "North Carolina")
write.csv(lineups, file = "unc_lineups_2020_21.csv", row.names = F)
runApp('C:/Users/samue/OneDrive/Personal Projects/Data Science/Shiny/UNC Basketball')
lineups = get_lineups(play_by_play_data = play_by_play, keep.dirty = T, garbage.filter = F) %>% filter(Team == "North Carolina")
lineups
write.csv(lineups, file = "unc_lineups_2020_21.csv", row.names = F)
#write.csv(lineups_by_game, file = "unc_lineups_by_game_2020_21.csv", row.names = F)
player_stats = get_player_stats(play_by_play) %>%
filter(Team == "North Carolina")
write.csv(player_stats, file = "unc_player_stats_2020_21.csv", row.names = F)
runApp('C:/Users/samue/OneDrive/Personal Projects/Data Science/Shiny/UNC Basketball')
schedule = get_team_schedule(season = "2020-21", team.name = "North Carolina")
play_by_play = get_play_by_play(schedule$Game_ID)
play_by_play$Date[play_by_play$ID == 4982651] = "11/25/2020"
play_by_play$Date[play_by_play$ID == 4984928] = "12/12/2020"
play_by_play$Date[play_by_play$ID == 4986554] = "12/22/2020"
play_by_play$Date[play_by_play$ID == 4987311] = "01/02/2021"
lineups = get_lineups(play_by_play_data = play_by_play, keep.dirty = T, garbage.filter = F) %>% filter(Team == "North Carolina")
lineups
write.csv(lineups, file = "unc_lineups_2020_21.csv", row.names = F)
#write.csv(lineups_by_game, file = "unc_lineups_by_game_2020_21.csv", row.names = F)
player_stats = get_player_stats(play_by_play) %>%
filter(Team == "North Carolina")
write.csv(player_stats, file = "unc_player_stats_2020_21.csv", row.names = F)
lineups = get_lineups(play_by_play_data = play_by_play, keep.dirty = T, garbage.filter = F) %>% filter(Team == "North Carolina")
lineups
write.csv(lineups, file = "unc_lineups_2020_21.csv", row.names = F)
#write.csv(lineups_by_game, file = "unc_lineups_by_game_2020_21.csv", row.names = F)
player_stats = get_player_stats(play_by_play) %>%
filter(Team == "North Carolina")
write.csv(player_stats, file = "unc_player_stats_2020_21.csv", row.names = F)
runApp('C:/Users/samue/OneDrive/Personal Projects/Data Science/Shiny/UNC Basketball')
knitr::opts_chunk$set(echo = TRUE)
#devtools::install_github("jflancer/bigballR")
library(tidyverse)
library(bigballR)
schedule = get_team_schedule(season = "2020-21", team.name = "North Carolina")
play_by_play = get_play_by_play(schedule$Game_ID)
play_by_play$Date[play_by_play$ID == 4982651] = "11/25/2020"
play_by_play$Date[play_by_play$ID == 4984928] = "12/12/2020"
play_by_play$Date[play_by_play$ID == 4986554] = "12/22/2020"
play_by_play$Date[play_by_play$ID == 4987311] = "01/02/2021"
play_by_play$Date[play_by_play$ID == 4982651] = "11/25/2020"
play_by_play$Date[play_by_play$ID == 4984928] = "12/12/2020"
play_by_play$Date[play_by_play$ID == 4986554] = "12/22/2020"
play_by_play$Date[play_by_play$ID == 4987520] = "01/02/2021"
play_by_play$Date[play_by_play$ID == 4987960] = "01/05/2021"
play_by_play$Date[play_by_play$ID == 4989289] = "01/12/2021"
lineups = get_lineups(play_by_play_data = play_by_play, keep.dirty = T, garbage.filter = F) %>% filter(Team == "North Carolina")
lineups
write.csv(lineups, file = "unc_lineups_2020_21.csv", row.names = F)
#write.csv(lineups_by_game, file = "unc_lineups_by_game_2020_21.csv", row.names = F)
player_stats = get_player_stats(play_by_play) %>%
filter(Team == "North Carolina")
write.csv(player_stats, file = "unc_player_stats_2020_21.csv", row.names = F)
shiny::runApp('C:/Users/samue/OneDrive/Personal Projects/Data Science/Shiny/UNC Basketball')
